{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "4D",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#parameters"
		},
		{
			"include": "#local_variables"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{ 
			"include" : "#boolean_values"
		},
		{
			"include" : "#constant_4d"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#block"
		},
		{
			"include": "#function-call-innards"
		},
		{
			"match": "\\n",
			"name": "punctuation.terminator.statement.4d"
		},
		{
			"include": "#param_separator"
		},
		{
			"name": "meta.bracket.square.access.4d",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "variable.object.4d"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.4d"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.4d"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		{
			"include": "#member_access"
		},
		{
			"include": "#method_access"
		}
	],
	"repository": {
		"constant_4d" : {
			"match" : "(?i)([a-z_0-9 ]*):K[0-9]*:[0-9]*",
			"name": "constant.numeric.4d"
		},
		"boolean_values": {
			"match": "(?i)\\b(NULL|true|false)\\b",
			"name": "constant.language.4d"
		},
		"parameters": {
			"match": "\\$[0-9]",
			"name": "variable.parameter.4d"
		},
		"local_variables": {
			"match": "\\$[a-zA-Z_0-9 ]*",
			"name": "variable.local.name.4d"
		},
		"param_separator":{
			"match": ";",
			"name": "punctuation.separator.delimiter.4d"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.4d",
					"match": "(?i)\\b(C_TEXT|C_BOOLEAN|C_REAL|C_OBJECT|C_POINTER|if|while|else|end if|end for|Begin SQL|End SQL|for each|End for each|while|end while|use|end use|case of|end case|repeat|until|for)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.4d",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.4d",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"begin": "(?<!\\w)(?=\\d|\\.\\d)",
			"end": "(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
			"patterns": [
				{
					"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"1": {
							"name": "keyword.other.unit.hexadecimal.4d"
						},
						"2": {
							"name": "constant.numeric.hexadecimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"4": {
							"name": "constant.numeric.hexadecimal.4d"
						},
						"5": {
							"name": "constant.numeric.hexadecimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"6": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"8": {
							"name": "keyword.other.unit.exponent.hexadecimal.4d"
						},
						"9": {
							"name": "keyword.operator.plus.exponent.hexadecimal.4d"
						},
						"10": {
							"name": "keyword.operator.minus.exponent.hexadecimal.4d"
						},
						"11": {
							"name": "constant.numeric.exponent.hexadecimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"12": {
							"name": "keyword.other.unit.suffix.floating-point.4d"
						}
					}
				},
				{
					"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"2": {
							"name": "constant.numeric.decimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"4": {
							"name": "constant.numeric.decimal.point.4d"
						},
						"5": {
							"name": "constant.numeric.decimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"6": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"8": {
							"name": "keyword.other.unit.exponent.decimal.4d"
						},
						"9": {
							"name": "keyword.operator.plus.exponent.decimal.4d"
						},
						"10": {
							"name": "keyword.operator.minus.exponent.decimal.4d"
						},
						"11": {
							"name": "constant.numeric.exponent.decimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"12": {
							"name": "keyword.other.unit.suffix.floating-point.4d"
						}
					}
				},
				{
					"match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"1": {
							"name": "keyword.other.unit.binary.4d"
						},
						"2": {
							"name": "constant.numeric.binary.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"4": {
							"name": "keyword.other.unit.suffix.integer.4d"
						}
					}
				},
				{
					"match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"1": {
							"name": "keyword.other.unit.octal.4d"
						},
						"2": {
							"name": "constant.numeric.octal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"4": {
							"name": "keyword.other.unit.suffix.integer.4d"
						}
					}
				},
				{
					"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"1": {
							"name": "keyword.other.unit.hexadecimal.4d"
						},
						"2": {
							"name": "constant.numeric.hexadecimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"5": {
							"name": "keyword.other.unit.exponent.hexadecimal.4d"
						},
						"6": {
							"name": "keyword.operator.plus.exponent.hexadecimal.4d"
						},
						"7": {
							"name": "keyword.operator.minus.exponent.hexadecimal.4d"
						},
						"8": {
							"name": "constant.numeric.exponent.hexadecimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"9": {
							"name": "keyword.other.unit.suffix.integer.4d"
						}
					}
				},
				{
					"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?(?!(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-]))",
					"captures": {
						"2": {
							"name": "constant.numeric.decimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"3": {
							"name": "punctuation.separator.constant.numeric.4d"
						},
						"5": {
							"name": "keyword.other.unit.exponent.decimal.4d"
						},
						"6": {
							"name": "keyword.operator.plus.exponent.decimal.4d"
						},
						"7": {
							"name": "keyword.operator.minus.exponent.decimal.4d"
						},
						"8": {
							"name": "constant.numeric.exponent.decimal.4d",
							"patterns": [
								{
									"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
									"name": "punctuation.separator.constant.numeric.4d"
								}
							]
						},
						"9": {
							"name": "keyword.other.unit.suffix.integer.4d"
						}
					}
				},
				{
					"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
					"name": "invalid.illegal.constant.numeric"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.4d"
						}
					},
					"match": "^/\\** =(\\s*.*?)\\s*= \\**/$\\n?",
					"name": "comment.block.4d"
				},
				{
					"begin": "/\\**",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.4d"
						}
					},
					"end": "\\**/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.4d"
						}
					},
					"name": "comment.block.4d"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.4d"
						}
					},
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
					"name": "comment.line.banner.4d"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.4d"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.4d"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.4d"
						}
					]
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": ":=",
					"name": "keyword.operator.assignment.4d"
				},
				{
					"match": "#|<=|>=|Ò=|<|>",
					"name": "keyword.operator.comparison.4d"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.4d"
				}
			]
		},
		"block": {
			"patterns": [
				{
					"begin": "(?i)\\b(for each)\\b",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.for_each.curly.4d"
						}
					},
					"end": "(?i)\\b(end for each)\\b",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.for_each.curly.4d"
						}
					},
					"name": "meta.block.4d"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!\\s*\\()\n(\n(?:[A-Za-z_\\s*][A-Za-z0-9_]*+)++(\\:C[0-9]+)?  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.4d"
						},

						"2": {
							"name": "entity.command.number.4d"
						},
						"3": {
							"name": "punctuation.section.arguments.begin.bracket.round.4d"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.4d"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#parameters"
						},
						{
							"include": "#local_variables"
						},
						{ 
							"include" : "#boolean_values"
						},
						{ 
							"include" : "#constant_4d"
						},
						{
							"include" : "#param_separator"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.4d"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.4d"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				}
			]
		},
		"member_access": {
			"match": "((?:[a-zA-Z_\\s*]*(\\:C[0-9]+)?|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b[a-zA-Z_]\\w*\\b(?!\\())",
			"captures": {
			  "1": {
				"name": "variable.other.object.access.4d"
			  },
			  "2": {
				"name": "entity.command.number.4d"
			  },
			  "3": {
				"name": "punctuation.separator.dot-access.4d"
			  },
			  "4": {
				"name": "punctuation.separator.pointer-access.4d"
			  },
			  "5": {
				"patterns": [
				  {
					"include": "#member_access"
				  },
				  {
					"include": "#method_access"
				  },
				  {
					"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
					"captures": {
					  "1": {
						"name": "variable.other.object.access.4d"
					  },
					  "2": {
						"name": "punctuation.separator.dot-access.4d"
					  },
					  "3": {
						"name": "punctuation.separator.pointer-access.4d"
					  }
					}
				  }
				]
			  },
			  "6": {
				"name": "variable.other.member.4d"
			  }
			}
		},
		"method_access": {
			"contentName": "meta.function-call.member.4d",
			"begin": "((?:[a-zA-Z_\\s*]*(\\:C[0-9]+)?|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
			"beginCaptures": {
			  "1": {
				"name": "variable.other.object.access.4d"
			  },
			  "2": {
				"name": "entity.command.number.4d"
			  },
			  "3": {
				"name": "punctuation.separator.dot-access.4d"
			  },
			  "4": {
				"name": "punctuation.separator.pointer-access.4d"
			  },
			  "5": {
				"patterns": [
				  {
					"include": "#member_access"
				  },
				  {
					"include": "#method_access"
				  },
				  {
					"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
					"captures": {
					  "1": {
						"name": "variable.other.object.access.4d"
					  },
					  "2": {
						"name": "punctuation.separator.dot-access.4d"
					  },
					  "3": {
						"name": "punctuation.separator.pointer-access.4d"
					  }
					}
				  }
				]
			  },
			  "6": {
				"name": "entity.name.function.member.4d"
			  },
			  "7": {
				"name": "punctuation.section.arguments.begin.bracket.round.function.member.4d"
			  }
			},
			"end": "(\\))",
			"endCaptures": {
			  "1": {
				"name": "punctuation.section.arguments.end.bracket.round.function.member.4d"
			  }
			},
			"patterns": [
			  {
				"include": "#function-call-innards"
			  }
			]
		  }
	},
	"scopeName": "source.4dm"
}